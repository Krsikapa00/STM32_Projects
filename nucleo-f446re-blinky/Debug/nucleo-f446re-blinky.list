
nucleo-f446re-blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000614  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007d8  080007d8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007d8  080007d8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080007d8  080007d8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007d8  080007d8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d8  080007d8  000017d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007dc  080007dc  000017dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080007e0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080007e4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080007e4  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022cc  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007ca  00000000  00000000  00004300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00004ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000190  00000000  00000000  00004d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002018d  00000000  00000000  00004e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002eed  00000000  00000000  00025025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6a04  00000000  00000000  00027f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006f0  00000000  00000000  000ee95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ef04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080007c0 	.word	0x080007c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080007c0 	.word	0x080007c0

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f80c 	bl	8000224 <MX_GPIO_Init>
	  /* Code to transmit data through UART. Will let us log data in buf on COM3 */
	  	  //	  strcpy((char *)buf, "Hello!\r\n");
	  	  //	  HAL_UART_Transmit(&huart2, buf, strlen((char *)buf), HAL_MAX_DELAY);

	  /* Blinking light code to switch every few  */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800020c:	2120      	movs	r1, #32
 800020e:	4804      	ldr	r0, [pc, #16]	@ (8000220 <main+0x1c>)
 8000210:	f000 fa97 	bl	8000742 <HAL_GPIO_TogglePin>

	  HAL_Delay(1000);
 8000214:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000218:	f000 f8c2 	bl	80003a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800021c:	bf00      	nop
 800021e:	e7f5      	b.n	800020c <main+0x8>
 8000220:	40020000 	.word	0x40020000

08000224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOC_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000238:	2300      	movs	r3, #0
 800023a:	603b      	str	r3, [r7, #0]
 800023c:	4b10      	ldr	r3, [pc, #64]	@ (8000280 <MX_GPIO_Init+0x5c>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000240:	4a0f      	ldr	r2, [pc, #60]	@ (8000280 <MX_GPIO_Init+0x5c>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6313      	str	r3, [r2, #48]	@ 0x30
 8000248:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <MX_GPIO_Init+0x5c>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	603b      	str	r3, [r7, #0]
 8000252:	683b      	ldr	r3, [r7, #0]
//  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	2120      	movs	r1, #32
 8000258:	480a      	ldr	r0, [pc, #40]	@ (8000284 <MX_GPIO_Init+0x60>)
 800025a:	f000 fa59 	bl	8000710 <HAL_GPIO_WritePin>
//  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800025e:	2320      	movs	r3, #32
 8000260:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000262:	2301      	movs	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026a:	2300      	movs	r3, #0
 800026c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4619      	mov	r1, r3
 8000272:	4804      	ldr	r0, [pc, #16]	@ (8000284 <MX_GPIO_Init+0x60>)
 8000274:	f000 f8b8 	bl	80003e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000278:	bf00      	nop
 800027a:	3718      	adds	r7, #24
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40023800 	.word	0x40023800
 8000284:	40020000 	.word	0x40020000

08000288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <NMI_Handler+0x4>

08000290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <HardFault_Handler+0x4>

08000298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <MemManage_Handler+0x4>

080002a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <BusFault_Handler+0x4>

080002a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002ac:	bf00      	nop
 80002ae:	e7fd      	b.n	80002ac <UsageFault_Handler+0x4>

080002b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002de:	f000 f83f 	bl	8000360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002ec:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <SystemInit+0x20>)
 80002ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002f2:	4a05      	ldr	r2, [pc, #20]	@ (8000308 <SystemInit+0x20>)
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800030c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000344 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000310:	f7ff ffea 	bl	80002e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	@ (8000348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	@ (800034c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	@ (8000350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	@ (8000354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	@ (8000358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800033a:	f000 fa1d 	bl	8000778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800033e:	f7ff ff61 	bl	8000204 <main>
  bx  lr    
 8000342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000350:	080007e0 	.word	0x080007e0
  ldr r2, =_sbss
 8000354:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000358:	20000024 	.word	0x20000024

0800035c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC_IRQHandler>
	...

08000360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <HAL_IncTick+0x20>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	461a      	mov	r2, r3
 800036a:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <HAL_IncTick+0x24>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4413      	add	r3, r2
 8000370:	4a04      	ldr	r2, [pc, #16]	@ (8000384 <HAL_IncTick+0x24>)
 8000372:	6013      	str	r3, [r2, #0]
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	20000000 	.word	0x20000000
 8000384:	20000020 	.word	0x20000020

08000388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  return uwTick;
 800038c:	4b03      	ldr	r3, [pc, #12]	@ (800039c <HAL_GetTick+0x14>)
 800038e:	681b      	ldr	r3, [r3, #0]
}
 8000390:	4618      	mov	r0, r3
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000020 	.word	0x20000020

080003a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003a8:	f7ff ffee 	bl	8000388 <HAL_GetTick>
 80003ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003b8:	d005      	beq.n	80003c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ba:	4b0a      	ldr	r3, [pc, #40]	@ (80003e4 <HAL_Delay+0x44>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	461a      	mov	r2, r3
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	4413      	add	r3, r2
 80003c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80003c6:	bf00      	nop
 80003c8:	f7ff ffde 	bl	8000388 <HAL_GetTick>
 80003cc:	4602      	mov	r2, r0
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d8f7      	bhi.n	80003c8 <HAL_Delay+0x28>
  {
  }
}
 80003d8:	bf00      	nop
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000000 	.word	0x20000000

080003e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b089      	sub	sp, #36	@ 0x24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
 8000402:	e165      	b.n	80006d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000404:	2201      	movs	r2, #1
 8000406:	69fb      	ldr	r3, [r7, #28]
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	4013      	ands	r3, r2
 8000416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000418:	693a      	ldr	r2, [r7, #16]
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	429a      	cmp	r2, r3
 800041e:	f040 8154 	bne.w	80006ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	f003 0303 	and.w	r3, r3, #3
 800042a:	2b01      	cmp	r3, #1
 800042c:	d005      	beq.n	800043a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000436:	2b02      	cmp	r3, #2
 8000438:	d130      	bne.n	800049c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000440:	69fb      	ldr	r3, [r7, #28]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	2203      	movs	r2, #3
 8000446:	fa02 f303 	lsl.w	r3, r2, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	69ba      	ldr	r2, [r7, #24]
 800044e:	4013      	ands	r3, r2
 8000450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	68da      	ldr	r2, [r3, #12]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	69ba      	ldr	r2, [r7, #24]
 8000460:	4313      	orrs	r3, r2
 8000462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	69ba      	ldr	r2, [r7, #24]
 8000468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000470:	2201      	movs	r2, #1
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	fa02 f303 	lsl.w	r3, r2, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	69ba      	ldr	r2, [r7, #24]
 800047c:	4013      	ands	r3, r2
 800047e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	f003 0201 	and.w	r2, r3, #1
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	fa02 f303 	lsl.w	r3, r2, r3
 8000490:	69ba      	ldr	r2, [r7, #24]
 8000492:	4313      	orrs	r3, r2
 8000494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	f003 0303 	and.w	r3, r3, #3
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d017      	beq.n	80004d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	2203      	movs	r2, #3
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	69ba      	ldr	r2, [r7, #24]
 80004bc:	4013      	ands	r3, r2
 80004be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	689a      	ldr	r2, [r3, #8]
 80004c4:	69fb      	ldr	r3, [r7, #28]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	69ba      	ldr	r2, [r7, #24]
 80004ce:	4313      	orrs	r3, r2
 80004d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	69ba      	ldr	r2, [r7, #24]
 80004d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f003 0303 	and.w	r3, r3, #3
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d123      	bne.n	800052c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	08da      	lsrs	r2, r3, #3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3208      	adds	r2, #8
 80004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	f003 0307 	and.w	r3, r3, #7
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	220f      	movs	r2, #15
 80004fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	69ba      	ldr	r2, [r7, #24]
 8000504:	4013      	ands	r3, r2
 8000506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	691a      	ldr	r2, [r3, #16]
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	4313      	orrs	r3, r2
 800051c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	08da      	lsrs	r2, r3, #3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3208      	adds	r2, #8
 8000526:	69b9      	ldr	r1, [r7, #24]
 8000528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	69ba      	ldr	r2, [r7, #24]
 8000540:	4013      	ands	r3, r2
 8000542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	f003 0203 	and.w	r2, r3, #3
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	4313      	orrs	r3, r2
 8000558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	69ba      	ldr	r2, [r7, #24]
 800055e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000568:	2b00      	cmp	r3, #0
 800056a:	f000 80ae 	beq.w	80006ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	4b5d      	ldr	r3, [pc, #372]	@ (80006e8 <HAL_GPIO_Init+0x300>)
 8000574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000576:	4a5c      	ldr	r2, [pc, #368]	@ (80006e8 <HAL_GPIO_Init+0x300>)
 8000578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057c:	6453      	str	r3, [r2, #68]	@ 0x44
 800057e:	4b5a      	ldr	r3, [pc, #360]	@ (80006e8 <HAL_GPIO_Init+0x300>)
 8000580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800058a:	4a58      	ldr	r2, [pc, #352]	@ (80006ec <HAL_GPIO_Init+0x304>)
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	089b      	lsrs	r3, r3, #2
 8000590:	3302      	adds	r3, #2
 8000592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	f003 0303 	and.w	r3, r3, #3
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	220f      	movs	r2, #15
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	69ba      	ldr	r2, [r7, #24]
 80005aa:	4013      	ands	r3, r2
 80005ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a4f      	ldr	r2, [pc, #316]	@ (80006f0 <HAL_GPIO_Init+0x308>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d025      	beq.n	8000602 <HAL_GPIO_Init+0x21a>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a4e      	ldr	r2, [pc, #312]	@ (80006f4 <HAL_GPIO_Init+0x30c>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d01f      	beq.n	80005fe <HAL_GPIO_Init+0x216>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a4d      	ldr	r2, [pc, #308]	@ (80006f8 <HAL_GPIO_Init+0x310>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d019      	beq.n	80005fa <HAL_GPIO_Init+0x212>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a4c      	ldr	r2, [pc, #304]	@ (80006fc <HAL_GPIO_Init+0x314>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d013      	beq.n	80005f6 <HAL_GPIO_Init+0x20e>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a4b      	ldr	r2, [pc, #300]	@ (8000700 <HAL_GPIO_Init+0x318>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d00d      	beq.n	80005f2 <HAL_GPIO_Init+0x20a>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a4a      	ldr	r2, [pc, #296]	@ (8000704 <HAL_GPIO_Init+0x31c>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d007      	beq.n	80005ee <HAL_GPIO_Init+0x206>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a49      	ldr	r2, [pc, #292]	@ (8000708 <HAL_GPIO_Init+0x320>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d101      	bne.n	80005ea <HAL_GPIO_Init+0x202>
 80005e6:	2306      	movs	r3, #6
 80005e8:	e00c      	b.n	8000604 <HAL_GPIO_Init+0x21c>
 80005ea:	2307      	movs	r3, #7
 80005ec:	e00a      	b.n	8000604 <HAL_GPIO_Init+0x21c>
 80005ee:	2305      	movs	r3, #5
 80005f0:	e008      	b.n	8000604 <HAL_GPIO_Init+0x21c>
 80005f2:	2304      	movs	r3, #4
 80005f4:	e006      	b.n	8000604 <HAL_GPIO_Init+0x21c>
 80005f6:	2303      	movs	r3, #3
 80005f8:	e004      	b.n	8000604 <HAL_GPIO_Init+0x21c>
 80005fa:	2302      	movs	r3, #2
 80005fc:	e002      	b.n	8000604 <HAL_GPIO_Init+0x21c>
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <HAL_GPIO_Init+0x21c>
 8000602:	2300      	movs	r3, #0
 8000604:	69fa      	ldr	r2, [r7, #28]
 8000606:	f002 0203 	and.w	r2, r2, #3
 800060a:	0092      	lsls	r2, r2, #2
 800060c:	4093      	lsls	r3, r2
 800060e:	69ba      	ldr	r2, [r7, #24]
 8000610:	4313      	orrs	r3, r2
 8000612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000614:	4935      	ldr	r1, [pc, #212]	@ (80006ec <HAL_GPIO_Init+0x304>)
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	089b      	lsrs	r3, r3, #2
 800061a:	3302      	adds	r3, #2
 800061c:	69ba      	ldr	r2, [r7, #24]
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000622:	4b3a      	ldr	r3, [pc, #232]	@ (800070c <HAL_GPIO_Init+0x324>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	43db      	mvns	r3, r3
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	4013      	ands	r3, r2
 8000630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800063e:	69ba      	ldr	r2, [r7, #24]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	4313      	orrs	r3, r2
 8000644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000646:	4a31      	ldr	r2, [pc, #196]	@ (800070c <HAL_GPIO_Init+0x324>)
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800064c:	4b2f      	ldr	r3, [pc, #188]	@ (800070c <HAL_GPIO_Init+0x324>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	43db      	mvns	r3, r3
 8000656:	69ba      	ldr	r2, [r7, #24]
 8000658:	4013      	ands	r3, r2
 800065a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000668:	69ba      	ldr	r2, [r7, #24]
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	4313      	orrs	r3, r2
 800066e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000670:	4a26      	ldr	r2, [pc, #152]	@ (800070c <HAL_GPIO_Init+0x324>)
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000676:	4b25      	ldr	r3, [pc, #148]	@ (800070c <HAL_GPIO_Init+0x324>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	43db      	mvns	r3, r3
 8000680:	69ba      	ldr	r2, [r7, #24]
 8000682:	4013      	ands	r3, r2
 8000684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800068e:	2b00      	cmp	r3, #0
 8000690:	d003      	beq.n	800069a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000692:	69ba      	ldr	r2, [r7, #24]
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	4313      	orrs	r3, r2
 8000698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <HAL_GPIO_Init+0x324>)
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <HAL_GPIO_Init+0x324>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	43db      	mvns	r3, r3
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	4013      	ands	r3, r2
 80006ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d003      	beq.n	80006c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80006bc:	69ba      	ldr	r2, [r7, #24]
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80006c4:	4a11      	ldr	r2, [pc, #68]	@ (800070c <HAL_GPIO_Init+0x324>)
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3301      	adds	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	f67f ae96 	bls.w	8000404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3724      	adds	r7, #36	@ 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40013800 	.word	0x40013800
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40021000 	.word	0x40021000
 8000704:	40021400 	.word	0x40021400
 8000708:	40021800 	.word	0x40021800
 800070c:	40013c00 	.word	0x40013c00

08000710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]
 800071c:	4613      	mov	r3, r2
 800071e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000720:	787b      	ldrb	r3, [r7, #1]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d003      	beq.n	800072e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000726:	887a      	ldrh	r2, [r7, #2]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800072c:	e003      	b.n	8000736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800072e:	887b      	ldrh	r3, [r7, #2]
 8000730:	041a      	lsls	r2, r3, #16
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	619a      	str	r2, [r3, #24]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000742:	b480      	push	{r7}
 8000744:	b085      	sub	sp, #20
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000754:	887a      	ldrh	r2, [r7, #2]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	4013      	ands	r3, r2
 800075a:	041a      	lsls	r2, r3, #16
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	43d9      	mvns	r1, r3
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	400b      	ands	r3, r1
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	619a      	str	r2, [r3, #24]
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <__libc_init_array>:
 8000778:	b570      	push	{r4, r5, r6, lr}
 800077a:	4d0d      	ldr	r5, [pc, #52]	@ (80007b0 <__libc_init_array+0x38>)
 800077c:	4c0d      	ldr	r4, [pc, #52]	@ (80007b4 <__libc_init_array+0x3c>)
 800077e:	1b64      	subs	r4, r4, r5
 8000780:	10a4      	asrs	r4, r4, #2
 8000782:	2600      	movs	r6, #0
 8000784:	42a6      	cmp	r6, r4
 8000786:	d109      	bne.n	800079c <__libc_init_array+0x24>
 8000788:	4d0b      	ldr	r5, [pc, #44]	@ (80007b8 <__libc_init_array+0x40>)
 800078a:	4c0c      	ldr	r4, [pc, #48]	@ (80007bc <__libc_init_array+0x44>)
 800078c:	f000 f818 	bl	80007c0 <_init>
 8000790:	1b64      	subs	r4, r4, r5
 8000792:	10a4      	asrs	r4, r4, #2
 8000794:	2600      	movs	r6, #0
 8000796:	42a6      	cmp	r6, r4
 8000798:	d105      	bne.n	80007a6 <__libc_init_array+0x2e>
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a0:	4798      	blx	r3
 80007a2:	3601      	adds	r6, #1
 80007a4:	e7ee      	b.n	8000784 <__libc_init_array+0xc>
 80007a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007aa:	4798      	blx	r3
 80007ac:	3601      	adds	r6, #1
 80007ae:	e7f2      	b.n	8000796 <__libc_init_array+0x1e>
 80007b0:	080007d8 	.word	0x080007d8
 80007b4:	080007d8 	.word	0x080007d8
 80007b8:	080007d8 	.word	0x080007d8
 80007bc:	080007dc 	.word	0x080007dc

080007c0 <_init>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	bf00      	nop
 80007c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c6:	bc08      	pop	{r3}
 80007c8:	469e      	mov	lr, r3
 80007ca:	4770      	bx	lr

080007cc <_fini>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	bf00      	nop
 80007d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d2:	bc08      	pop	{r3}
 80007d4:	469e      	mov	lr, r3
 80007d6:	4770      	bx	lr
